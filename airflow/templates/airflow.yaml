#  Licensed to the Apache Software Foundation (ASF) under one   *
#  or more contributor license agreements.  See the NOTICE file *
#  distributed with this work for additional information        *
#  regarding copyright ownership.  The ASF licenses this file   *
#  to you under the Apache License, Version 2.0 (the            *
#  "License"); you may not use this file except in compliance   *
#  with the License.  You may obtain a copy of the License at   *
#                                                               *
#    http://www.apache.org/licenses/LICENSE-2.0                 *
#                                                               *
#  Unless required by applicable law or agreed to in writing,   *
#  software distributed under the License is distributed on an  *
#  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *
#  KIND, either express or implied.  See the License for the    *
#  specific language governing permissions and limitations      *
#  under the License.                                           *

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ .Values.airflow.name }}
spec:
  replicas: {{ .Values.airflow.replicas }}
  template:
    metadata:
      labels:
        name: {{ .Values.airflow.name }}
    spec:
      serviceAccountName: {{ .Values.airflow.name }}-sa
      initContainers:
      - name: "init"
        image: "{{ .Values.airflow.image.repository }}:{{ .Values.airflow.image.tag }}"
        imagePullPolicy: {{ .Values.airflow.image.pullPolicy }}
        volumeMounts:
        - name: airflow-configmap
          mountPath: /root/airflow/airflow.cfg
          subPath: airflow.cfg
        - name: vol
          mountPath: /root/airflow/dags
          subPath: airflow/dags
        - name: vol
          mountPath: /root/test_volume
          subPath: airflow/test
        env:
        - name: SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              name: airflow-secrets
              key: sql_alchemy_conn
        command:
          - "bash"
        args:
          - "-cx"
          - "./tmp/airflow-test-env-init.sh"
      containers:
      - name: webserver
        image: "{{ .Values.airflow.image.repository }}:{{ .Values.airflow.image.tag }}"
        imagePullPolicy: {{ .Values.airflow.image.pullPolicy }}
        ports:
        - name: webserver
          containerPort: {{ .Values.airflow.containerPort }}
        args: ["webserver"]
        env:
        - name: AIRFLOW_KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              name: airflow-secrets
              key: sql_alchemy_conn
        volumeMounts:
        - name: airflow-configmap
          mountPath: /root/airflow/airflow.cfg
          subPath: airflow.cfg
        - name: vol
          mountPath: /root/airflow/dags
          subPath: airflow/dags
        - name: vol-logs
          mountPath: /root/airflow/logs
          subPath: airflow/logs
      - name: scheduler
        image: "{{ .Values.airflow.image.repository }}:{{ .Values.airflow.image.tag }}"
        imagePullPolicy: {{ .Values.airflow.image.pullPolicy }}
        args: ["scheduler"]
        env:
        - name: AIRFLOW_KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              name: airflow-secrets
              key: sql_alchemy_conn
        volumeMounts:
        - name: airflow-configmap
          mountPath: /root/airflow/airflow.cfg
          subPath: airflow.cfg
        - name: vol
          mountPath: /root/airflow/dags
          subPath: airflow/dags
        - name: vol-logs
          mountPath: /root/airflow/logs
          subPath: airflow/logs
        livenessProbe:
          initialDelaySeconds: {{ .Values.airflow.livenessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.airflow.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.airflow.livenessProbe.failureThreshold }}
          httpGet:
            path: {{ .Values.airflow.livenessProbe.path }}
            port: {{ .Values.airflow.livenessProbe.port }}
      volumes:
      - name: airflow-configmap
        configMap:
          name: airflow-configmap
      - name: vol
        persistentVolumeClaim:
          claimName: pvc
      - name: vol-logs
        persistentVolumeClaim:
          claimName: pvc-logs
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.airflow.service.name }}
spec:
  ports:
  - port: {{ .Values.airflow.service.port }}
    targetPort: {{ .Values.airflow.service.targetPort }}
  type: {{ .Values.airflow.service.type }}
  externalIPs:
    - {{ .Values.airflow.service.externalIPs }}
  selector:
    name: {{ .Values.airflow.service.name }}

