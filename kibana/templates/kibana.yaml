apiVersion: v1
kind: PersistentVolumeClaim
metadata:
 name: kibana
 annotations:
   volume.beta.kubernetes.io/storage-class: {{ .Values.storage_class }}
spec:
 accessModes:
  - ReadWriteMany
 resources:
   requests:
     storage: 200Mi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kibana-cm
data:
  kibana.yml: |
    elasticsearch.url: http://es-svc.elastic:9200
    server.host: 0.0.0.0
    server.name: kibana
    server.port: 5601
    server.basePath: /api/v1/namespaces/elastic/services/kibana-svc:ui/proxy
    xpack.security.enabled: false
---
apiVersion: v1
kind: Service
metadata:
  name: kibana-svc
  labels:
    app: kibana
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "Kibana"
spec:
  ports:
  - name: ui
    port: 5601
    protocol: TCP
    targetPort: 5601
  selector:
    app: kibana
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  labels:
    app: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
      - name: kibana
        image: docker.elastic.co/kibana/kibana:6.2.3
        resources:
          limits:
            cpu: 2000m
            memory: 2Gi
          requests:
            cpu: 500m
            memory: 512Mi
        ports:
        - containerPort: 5601
          name: ui
          protocol: TCP
        volumeMounts:
        - name: kibana-config
          mountPath: /usr/share/kibana/config/kibana.yml
          subPath: kibana.yml
        - name: kibana-optimize
          mountPath: /usr/share/kibana/optimize
      volumes:
      - name: kibana-config
        configMap:
          name: kibana-cm
      - name: kibana-optimize
        persistentVolumeClaim:
          claimName: kibana
        

        
