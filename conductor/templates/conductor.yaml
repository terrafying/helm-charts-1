{{ $alphabet := dict 1 "a" 2 "b" 3 "c" 4 "d" 5 "e" 6 "f" 7 "g" 8 "h" 9 "i" 10 "j" 11 "k" 12 "l" 13 "m" 14 "n" 15 "o" 16 "p" 17 "q" 18 "r" 19 "s" 20 "t" 21 "u" 22 "v" 23 "w" 24 "x" 25 "y" 26 "z"}}
{{ $factor := 3}}
{{ $dynomiteHosts := dict "a" .Values.dynomiteHostsA "b" .Values.dynomiteHostsB "c" .Values.dynomiteHostsC }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: conductor-cm
data: {{range $i, $e := until $factor}} {{ $group := index $alphabet (toString (add1 (mod $i 3))) }}
  conductor-server-{{ $group }}.properties: |
    db=dynomite
    # Dynomite Cluster details.
    # format is host:port:rack separated by semicolon
    workflow.dynomite.cluster.hostsdynomite-0.dynomite-svc.dynomite.svc.cluster.local:8102:us-east-1a;dynomite-1.dynomite-svc.dynomite.svc.cluster.local:8102:us-east-1b;dynomite-2.dynomite-svc.dynomite.svc.cluster.local:8102:us-east-1c
    workflow.dynomite.cluster.name=dyn_o_mite
    workflow.namespace.prefix=conductor
    workflow.namespace.queue.prefix=conductor_queues
    queues.dynomite.threads=10
    queues.dynomite.nonQuorum.port=22122
    # Transport address to elasticsearch
    workflow.elasticsearch.url={{ $.Values.esUrl }}
    workflow.elasticsearch.cluster.name={{ $.Values.esClusterName }}
    workflow.elasticsearch.index.name=conductor
    # Load sample kitchen sink workflow
    loadSample=true
    EC2_REGION=us-east-1
    EC2_AVAILABILITY_ZONE=us-east-1{{ $group }} 
    {{end}}
  log4j.properties: |
    log4j.rootLogger=INFO,stdout
    log4j.appender.stdout=org.apache.log4j.ConsoleAppender
    log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
    log4j.appender.stdout.layout.ConversionPattern=%p\t%d{ISO8601}\t%r\t%c\t[%t]\t%m%n
---
apiVersion: v1
kind: Service
metadata:
  name: conductor-svc
  labels:
    app: conductor
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "conductor"
spec:
  ports:
  - name: ui
    port: 5000
    protocol: TCP
    targetPort: 5000
  - name: server
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: conductor
{{range $i, $e := until $factor}} {{ $group := index $alphabet (toString (add1 (mod $i 3))) }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: conductor-{{ $group }}
  labels:
    app: conductor
spec:
  replicas: {{ $.Values.replicas }}
  selector:
    matchLabels:
      app: conductor
  template:
    metadata:
      labels:
        app: conductor
    spec:
      containers:
      - name: conductor-server
        image: ihardz/conductor-server:latest
        command:
        - /bin/sh
        - -c
        - java -jar /app/libs/conductor-server-*-all.jar /app/config/conductor-server-{{ $group }}.properties /app/config/log4j.properties
        ports:
        - containerPort: 8080
          name: server
          protocol: TCP
        volumeMounts:
        - name: conductor-config
          mountPath: /app/config/conductor-server-{{ $group }}.properties
          subPath: conductor-server-{{ $group }}.properties
        - name: conductor-config
          mountPath: /app/config/log4j.properties
          subPath: log4j.properties
      - name: conductor-ui
        image: ihardz/conductor-ui:latest
        ports:
        - containerPort: 5000
          name: server
          protocol: TCP
      volumes:
      - name: conductor-config
        configMap:
          name: conductor-cm
{{end}}